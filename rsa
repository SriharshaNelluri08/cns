import random
from math import gcd

# Helper Functions
def is_prime(num):
    """Check if a number is prime."""
    if num < 2:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

def generate_prime_candidate(start, end):
    """Generate a random prime number in a given range."""
    while True:
        num = random.randint(start, end)
        if is_prime(num):
            return num

def mod_inverse(e, phi):
    """Compute the modular inverse of e mod phi."""
    for d in range(1, phi):
        if (e * d) % phi == 1:
            return d
    return None

# RSA Functions
def generate_keys():
    """Generate RSA public and private keys."""
    # Step 1: Choose two distinct prime numbers
    p = generate_prime_candidate(50, 100)
    q = generate_prime_candidate(50, 100)
    while p == q:
        q = generate_prime_candidate(50, 100)

    # Step 2: Compute n and phi(n)
    n = p * q
    phi = (p - 1) * (q - 1)

    # Step 3: Choose e such that 1 < e < phi and gcd(e, phi) = 1
    e = random.randint(2, phi - 1)
    while gcd(e, phi) != 1:
        e = random.randint(2, phi - 1)

    # Step 4: Compute the private key d
    d = mod_inverse(e, phi)

    return (e, n), (d, n)

def encrypt(plaintext, public_key):
    """Encrypt plaintext using the public key."""
    e, n = public_key
    ciphertext = [pow(ord(char), e, n) for char in plaintext]
    return ciphertext

def decrypt(ciphertext, private_key):
    """Decrypt ciphertext using the private key."""
    d, n = private_key
    plaintext = ''.join([chr(pow(char, d, n)) for char in ciphertext])
    return plaintext

# Main Program
if __name__ == "__main__":
    print("Generating RSA keys...")
    public_key, private_key = generate_keys()
    print(f"Public Key: {public_key}")
    print(f"Private Key: {private_key}")

    message = "HELLO RSA"
    print(f"\nOriginal Message: {message}")

    # Encrypt the message
    encrypted_message = encrypt(message, public_key)
    print(f"Encrypted Message: {encrypted_message}")

    # Decrypt the message
    decrypted_message = decrypt(encrypted_message, private_key)
    print(f"Decrypted Message: {decrypted_message}")
