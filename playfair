def create_playfair_table(key):
    key = "".join(dict.fromkeys(key.upper().replace("J", "I")))  # Remove duplicates and handle 'J'
    alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ"
    table = key + "".join(ch for ch in alphabet if ch not in key)
    return [table[i:i+5] for i in range(0, 25, 5)]

def find_position(table, char):
    for row, line in enumerate(table):
        if char in line:
            return row, line.index(char)
    return None

def encrypt_digraph(digraph, table):
    row1, col1 = find_position(table, digraph[0])
    row2, col2 = find_position(table, digraph[1])
    if row1 == row2:  # Same row
        return table[row1][(col1 + 1) % 5] + table[row2][(col2 + 1) % 5]
    elif col1 == col2:  # Same column
        return table[(row1 + 1) % 5][col1] + table[(row2 + 1) % 5][col2]
    else:  # Rectangle
        return table[row1][col2] + table[row2][col1]

def playfair_encrypt(plaintext, key):
    table = create_playfair_table(key)
    plaintext = plaintext.upper().replace("J", "I").replace(" ", "")
    digraphs = []
    i = 0
    while i < len(plaintext):
        a = plaintext[i]
        b = plaintext[i + 1] if i + 1 < len(plaintext) else 'X'
        if a == b:
            digraphs.append(a + 'X')
            i += 1
        else:
            digraphs.append(a + b)
            i += 2
    ciphertext = ''.join(encrypt_digraph(pair, table) for pair in digraphs)
    return ciphertext

# Example Usage
key = "PLAYFAIR"
plaintext = "HELLO WORLD"
ciphertext = playfair_encrypt(plaintext, key)
print("Ciphertext:", ciphertext)
